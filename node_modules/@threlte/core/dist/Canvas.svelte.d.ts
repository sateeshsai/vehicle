import { SvelteComponentTyped } from "svelte";
export declare const invalidateGlobally: (debugFrameloopMessage?: string) => void;
import { type ColorSpace, type ShadowMapType, type ToneMapping, type WebGLRendererParameters } from 'three';
import type { Size } from './types';
declare const __propDef: {
    props: {
        /**
           * @default window.devicePixelRatio
           */ dpr?: number | undefined;
        /**
           * @default ACESFilmicToneMapping
           */ toneMapping?: ToneMapping | undefined;
        /**
           * @default 'srgb'
           */ colorSpace?: ColorSpace | undefined;
        /**
           * @default 'demand'
           */ frameloop?: "always" | "never" | "demand" | undefined;
        /**
           * @default false
           */ debugFrameloop?: boolean | undefined;
        /**
           * @default PCFSoftShadowMap
           */ shadows?: boolean | ShadowMapType | undefined;
        size?: Size | undefined;
        rendererParameters?: WebGLRendererParameters | undefined;
        /**
           * @default true
           */ colorManagementEnabled?: boolean | undefined;
        /**
           * @default true
           */ useLegacyLights?: boolean | undefined;
        ctx?: import("./lib/contexts").ThrelteContext | undefined;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export declare type CanvasProps = typeof __propDef.props;
export declare type CanvasEvents = typeof __propDef.events;
export declare type CanvasSlots = typeof __propDef.slots;
export default class Canvas extends SvelteComponentTyped<CanvasProps, CanvasEvents, CanvasSlots> {
    get ctx(): import("./lib/contexts").ThrelteContext;
}
export {};
