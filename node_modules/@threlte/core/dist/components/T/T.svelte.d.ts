import { SvelteComponentTyped } from "svelte";
import type { Events, Slots, MaybeInstance } from './types';
declare class __sveltets_Render<Type> {
    props(): {
        is: Type;
    } & import("./types").AnyProps & import("./types").DisposableProps & import("./types").RefProps<Type> & import("./types").BaseProps<Type> & import("./types").ClassProps<Type> & import("./types").CameraProps<Type> & Partial<Omit<MaybeInstance<Type> extends import("type-fest").Primitive ? Record<string, unknown> : MaybeInstance<Type> extends infer T_1 ? { [K in keyof T_1]?: (MaybeInstance<Type>[K] extends {
        set: (...args: any[]) => any;
    } ? Parameters<MaybeInstance<Type>[K]["set"]> | Parameters<MaybeInstance<Type>[K]["set"]>[0] : MaybeInstance<Type>[K] extends import("./types").AnyFn ? never : MaybeInstance<Type>[K]) | undefined; } : never, import("./types").OmittedPropKeys | NonNullable<(MaybeInstance<Type> extends infer T_2 ? { [Key in keyof T_2]: MaybeInstance<Type>[Key] extends import("./types").AnyFn ? Key : never; } : never)[keyof MaybeInstance<Type>]>>>;
    events(): Events<Type>;
    slots(): Slots<Type>;
}
export declare type TProps<Type> = ReturnType<__sveltets_Render<Type>['props']>;
export declare type TEvents<Type> = ReturnType<__sveltets_Render<Type>['events']>;
export declare type TSlots<Type> = ReturnType<__sveltets_Render<Type>['slots']>;
export default class T<Type> extends SvelteComponentTyped<TProps<Type>, TEvents<Type>, TSlots<Type>> {
}
export {};
