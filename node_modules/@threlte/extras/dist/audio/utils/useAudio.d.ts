import { type Audio, type PositionalAudio } from 'three';
declare type AudioSource = string | AudioBuffer | HTMLMediaElement | AudioBufferSourceNode | MediaStream;
declare type AudioVolume = number | undefined;
declare type AudioPlaybackRate = number | undefined;
export declare type AudioProps = {
    src: AudioSource;
    autoplay?: boolean;
    loop?: boolean;
    volume?: AudioVolume;
    playbackRate?: AudioPlaybackRate;
    detune?: number;
};
export declare type AudioEvents = {
    load: AudioBuffer | void;
    progress: ProgressEvent<EventTarget>;
    error: ErrorEvent;
};
/**
 * This hook handles basic audio functionality.
 * Itâ€™s used by the <Audio> and <PositionalAudio> components.
 */
export declare const useAudio: <T extends Audio<GainNode> | PositionalAudio>(audio: T) => {
    setVolume: (volume: AudioProps['volume']) => void;
    setSrc: (source: AudioProps['src']) => Promise<void>;
    setPlaybackRate: (playbackRate: AudioProps['playbackRate']) => void;
    setAutoPlay: (value?: AudioProps['autoplay']) => void;
    setDetune: (value?: AudioProps['detune']) => void;
    setLoop: (value?: AudioProps['loop']) => void;
    play: (delay?: number | any) => Promise<Audio<GainNode> | PositionalAudio | undefined>;
    pause: () => Audio<GainNode> | PositionalAudio;
    stop: () => Audio<GainNode> | PositionalAudio | T;
};
export {};
