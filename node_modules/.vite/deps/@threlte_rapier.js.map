{
  "version": 3,
  "sources": ["../../@threlte/rapier/dist/hooks/useRapier.js", "../../@threlte/rapier/dist/hooks/useCollisionGroups.js", "../../@threlte/rapier/dist/hooks/useRigidBody.js", "../../@threlte/rapier/dist/hooks/useJoint.js", "../../@threlte/rapier/dist/hooks/useRevoluteJoint.js", "../../@threlte/rapier/dist/hooks/usePrismaticJoint.js", "../../@threlte/rapier/dist/hooks/useFixedJoint.js", "../../@threlte/rapier/dist/hooks/useSphericalJoint.js", "../../@threlte/rapier/dist/lib/createRapierContext.js", "../../@threlte/rapier/dist/hooks/useFrameHandler.js", "../../@threlte/rapier/dist/components/World/InnerWorld.svelte", "../../@threlte/rapier/dist/components/World/World.svelte", "../../@threlte/rapier/dist/hooks/useHasEventListener.js", "../../@threlte/rapier/dist/lib/getWorldTransforms.js", "../../@threlte/rapier/dist/lib/parseRigidBodyType.js", "../../@threlte/rapier/dist/components/RigidBody/RigidBody.svelte", "../../@threlte/rapier/dist/components/Debug/Debug.svelte", "../../@threlte/rapier/dist/lib/applyColliderActiveEvents.js", "../../@threlte/rapier/dist/lib/eulerToQuaternion.js", "../../@threlte/rapier/dist/lib/scaleColliderArgs.js", "../../@threlte/rapier/dist/components/Colliders/Collider.svelte", "../../@threlte/rapier/dist/lib/createCollidersFromChildren.js", "../../@threlte/rapier/dist/components/Colliders/AutoColliders.svelte", "../../@threlte/rapier/dist/lib/computeBitMask.js", "../../@threlte/rapier/dist/components/CollisionGroups/CollisionGroups.svelte", "../../@threlte/rapier/dist/components/Attractor/Attractor.svelte", "../../@threlte/rapier/dist/recipes/BasicPlayerController.svelte"],
  "sourcesContent": ["import { getContext } from 'svelte';\nexport const useRapier = () => {\n    return getContext('threlte-rapier-context');\n};\n", "import { getContext, onDestroy } from 'svelte';\nimport { get } from 'svelte/store';\nconst applyBitMask = (collidersMap, bitMask) => {\n    collidersMap.forEach((c) => {\n        if (c && c.collider && c.collider.isValid()) {\n            c.collider.setCollisionGroups(bitMask);\n        }\n    });\n};\nexport const useCollisionGroups = () => {\n    const collidersMap = new Map();\n    const bitMaskStore = getContext('threlte-rapier-collision-group');\n    if (!bitMaskStore)\n        return {\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            registerColliders: (colliders) => { },\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            removeColliders: (colliders) => { }\n        };\n    let bitMask = get(bitMaskStore);\n    const unsubscribe = bitMaskStore.subscribe((newBitMask) => {\n        bitMask = newBitMask;\n        applyBitMask(collidersMap, newBitMask);\n    });\n    onDestroy(unsubscribe);\n    const registerColliders = (colliders) => {\n        colliders.forEach((c) => {\n            if (!collidersMap.has(c.handle)) {\n                collidersMap.set(c.handle, {\n                    collider: c,\n                    initialCollisionGroup: c.collisionGroups()\n                });\n            }\n        });\n        applyBitMask(collidersMap, bitMask);\n    };\n    const removeColliders = (colliders) => {\n        colliders.forEach((c) => {\n            const mapItem = collidersMap.get(c.handle);\n            if (mapItem) {\n                if (c && c.isValid()) {\n                    c.setCollisionGroups(mapItem.initialCollisionGroup);\n                }\n            }\n            collidersMap.delete(c.handle);\n        });\n    };\n    return {\n        registerColliders,\n        removeColliders\n    };\n};\n", "import { getContext } from 'svelte';\nexport const useRigidBody = () => {\n    return getContext('threlte-rapier-rigidbody');\n};\n", "import { MultibodyJoint } from '@dimforge/rapier3d-compat';\nimport { onDestroy } from 'svelte';\nimport { derived, get, writable } from 'svelte/store';\nimport { useRapier } from './useRapier';\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useJoint = (initializeJoint) => {\n    const rigidBodyA = writable(undefined);\n    const rigidBodyB = writable(undefined);\n    const ctx = useRapier();\n    const bodies = derived([rigidBodyA, rigidBodyB], ([rbA, rbB]) => {\n        if (!!rbA && !!rbB) {\n            return [rbA, rbB];\n        }\n    });\n    const joint = writable(undefined);\n    const unsubscribeBodies = bodies.subscribe((bodies) => {\n        if (bodies)\n            joint.set(initializeJoint(...bodies, ctx));\n    });\n    onDestroy(() => {\n        unsubscribeBodies();\n        const j = get(joint);\n        if (!j)\n            return;\n        if (j instanceof MultibodyJoint) {\n            ctx.world.removeMultibodyJoint(j, true);\n        }\n        else {\n            ctx.world.removeImpulseJoint(j, true);\n        }\n    });\n    return {\n        joint,\n        rigidBodyA,\n        rigidBodyB\n    };\n};\n", "import { Vector3 } from 'three';\nimport { useJoint } from './useJoint';\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useRevoluteJoint = (anchorA, anchorB, axis, limits) => {\n    return useJoint((rbA, rbB, { world, rapier }) => {\n        const jaA = anchorA instanceof Vector3 ? anchorA : new Vector3(...anchorA);\n        const jaB = anchorB instanceof Vector3 ? anchorB : new Vector3(...anchorB);\n        const jAxis = (axis instanceof Vector3 ? axis : new Vector3(...axis)).normalize();\n        const params = rapier.JointData.revolute(jaA, jaB, jAxis);\n        if (limits) {\n            params.limitsEnabled = true;\n            params.limits = limits;\n        }\n        return world.createImpulseJoint(params, rbA, rbB, true);\n    });\n};\n", "import { Vector3 } from 'three';\nimport { useJoint } from './useJoint';\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const usePrismaticJoint = (anchorA, anchorB, axis, limits) => {\n    return useJoint((rbA, rbB, { world, rapier }) => {\n        const jaA = anchorA instanceof Vector3 ? anchorA : new Vector3(...anchorA);\n        const jaB = anchorB instanceof Vector3 ? anchorB : new Vector3(...anchorB);\n        const jAxis = (axis instanceof Vector3 ? axis : new Vector3(...axis)).normalize();\n        const params = rapier.JointData.prismatic(jaA, jaB, jAxis);\n        if (limits) {\n            params.limitsEnabled = true;\n            params.limits = limits;\n        }\n        return world.createImpulseJoint(params, rbA, rbB, true);\n    });\n};\n", "import { Euler, Quaternion, Vector3 } from 'three';\nimport { useJoint } from './useJoint';\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useFixedJoint = (anchorA, frameA, anchorB, frameB) => {\n    const jaA = anchorA instanceof Vector3 ? anchorA : new Vector3(...anchorA);\n    const jfA = new Quaternion().setFromEuler(frameA instanceof Euler ? frameA : new Euler(...frameA));\n    const jaB = anchorB instanceof Vector3 ? anchorB : new Vector3(...anchorB);\n    const jfB = new Quaternion().setFromEuler(frameB instanceof Euler ? frameB : new Euler(...frameB));\n    return useJoint((rbA, rbB, { world, rapier }) => {\n        const params = rapier.JointData.fixed(jaA, jfA, jaB, jfB);\n        return world.createImpulseJoint(params, rbA, rbB, true);\n    });\n};\n", "import { Vector3 } from 'three';\nimport { useJoint } from './useJoint';\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useSphericalJoint = (anchorA, anchorB) => {\n    return useJoint((rbA, rbB, { world, rapier }) => {\n        const jaA = anchorA instanceof Vector3 ? anchorA : new Vector3(...anchorA);\n        const jaB = anchorB instanceof Vector3 ? anchorB : new Vector3(...anchorB);\n        const params = rapier.JointData.spherical(jaA, jaB);\n        return world.createImpulseJoint(params, rbA, rbB, true);\n    });\n};\n", "import RAPIER from '@dimforge/rapier3d-compat';\nimport { currentWritable } from '@threlte/core';\nimport { readable, writable } from 'svelte/store';\nexport const createRapierContext = (...args) => {\n    const world = new RAPIER.World(...args);\n    const colliderObjects = new Map();\n    const rigidBodyObjects = new Map();\n    const rigidBodyEventDispatchers = new Map();\n    const colliderEventDispatchers = new Map();\n    /**\n     * Adds a collider to the context\n     * @param collider\n     * @param object\n     * @param eventDispatcher\n     */\n    const addColliderToContext = (collider, object, eventDispatcher) => {\n        colliderObjects.set(collider.handle, object);\n        colliderEventDispatchers.set(collider.handle, eventDispatcher);\n    };\n    /**\n     * Removes the collider from the context\n     * @param collider\n     */\n    const removeColliderFromContext = (collider) => {\n        colliderObjects.delete(collider.handle);\n        colliderEventDispatchers.delete(collider.handle);\n    };\n    /**\n     * Adds a RigidBody to the context\n     * @param rigidBody\n     * @param object\n     * @param eventDispatcher\n     */\n    const addRigidBodyToContext = (rigidBody, object, eventDispatcher) => {\n        rigidBodyObjects.set(rigidBody.handle, object);\n        rigidBodyEventDispatchers.set(rigidBody.handle, eventDispatcher);\n    };\n    /**\n     * Removes the RigidBody from the context\n     * @param rigidBody\n     */\n    const removeRigidBodyFromContext = (rigidBody) => {\n        rigidBodyObjects.delete(rigidBody.handle);\n        rigidBodyEventDispatchers.delete(rigidBody.handle);\n    };\n    // Dummy functions, will be replaced by useFrameHandler fn\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const pause = () => { };\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const resume = () => { };\n    return {\n        rapier: RAPIER,\n        world,\n        colliderObjects,\n        rigidBodyObjects,\n        rigidBodyEventDispatchers,\n        colliderEventDispatchers,\n        addColliderToContext,\n        removeColliderFromContext,\n        addRigidBodyToContext,\n        removeRigidBodyFromContext,\n        debug: writable(false),\n        pause,\n        resume,\n        paused: readable(false)\n    };\n};\n", "import { Collider, EventQueue } from '@dimforge/rapier3d-compat';\nimport { useFrame } from '@threlte/core';\nimport { derived } from 'svelte/store';\nimport { Object3D, Quaternion, Vector3 } from 'three';\nconst tempObject = new Object3D();\nconst tempVector3 = new Vector3();\nconst tempQuaternion = new Quaternion();\nconst getEventDispatchers = (ctx, collider1, collider2) => {\n    const colliderDispatcher1 = ctx.colliderEventDispatchers.get(collider1.handle);\n    const colliderDispatcher2 = ctx.colliderEventDispatchers.get(collider2.handle);\n    const rigidBody1 = collider1.parent();\n    const rigidBody2 = collider2.parent();\n    const rigidBodyDispatcher1 = rigidBody1\n        ? ctx.rigidBodyEventDispatchers.get(rigidBody1.handle)\n        : undefined;\n    const rigidBodyDispatcher2 = rigidBody2\n        ? ctx.rigidBodyEventDispatchers.get(rigidBody2.handle)\n        : undefined;\n    return {\n        colliderDispatcher1,\n        colliderDispatcher2,\n        rigidBodyDispatcher1,\n        rigidBodyDispatcher2\n    };\n};\nexport const useFrameHandler = (ctx, order) => {\n    const eventQueue = new EventQueue(false);\n    const { start, started, stop } = useFrame((_, delta) => {\n        // if (!eventQueue) return\n        const { world } = ctx;\n        // Set timestep to current delta, to allow for variable frame rates\n        // We cap the delta at 100, so that the physics simulation doesn't get wild\n        world.timestep = Math.min(0.1, delta);\n        world.step(eventQueue);\n        // Update meshes\n        ctx.rigidBodyObjects.forEach((mesh, handle) => {\n            const rigidBody = world.getRigidBody(handle);\n            if (!rigidBody)\n                return;\n            const dispatcher = ctx.rigidBodyEventDispatchers.get(handle);\n            if (!rigidBody || !rigidBody.isValid())\n                return;\n            if (dispatcher) {\n                if (rigidBody.isSleeping() && !mesh.userData.isSleeping) {\n                    dispatcher('sleep');\n                }\n                if (!rigidBody.isSleeping() && mesh.userData.isSleeping) {\n                    dispatcher('wake');\n                }\n                mesh.userData.isSleeping = rigidBody.isSleeping();\n            }\n            if (!rigidBody || rigidBody.isSleeping() || rigidBody.isFixed() || !mesh.parent) {\n                return;\n            }\n            // Position\n            const { x, y, z } = rigidBody.translation();\n            tempObject.position.set(x, y, z);\n            // Rotation\n            const rotation = rigidBody.rotation();\n            tempQuaternion.set(rotation.x, rotation.y, rotation.z, rotation.w);\n            tempObject.rotation.setFromQuaternion(tempQuaternion);\n            // Scale\n            mesh.getWorldScale(tempVector3);\n            tempObject.scale.copy(tempVector3);\n            tempObject.updateMatrix();\n            tempObject.applyMatrix4(mesh.parent.matrixWorld.clone().invert());\n            tempObject.updateMatrix();\n            mesh.position.setFromMatrixPosition(tempObject.matrix);\n            mesh.rotation.setFromRotationMatrix(tempObject.matrix);\n        });\n        eventQueue.drainContactForceEvents((e) => {\n            const collider1 = world.getCollider(e.collider1());\n            const collider2 = world.getCollider(e.collider2());\n            // Sanity check\n            if (!collider1 || !collider2) {\n                return;\n            }\n            const { colliderDispatcher1, colliderDispatcher2, rigidBodyDispatcher1, rigidBodyDispatcher2 } = getEventDispatchers(ctx, collider1, collider2);\n            const rigidBody1 = collider1.parent();\n            const rigidBody2 = collider2.parent();\n            // Collider events\n            colliderDispatcher1?.('contact', {\n                targetCollider: collider2,\n                targetRigidBody: rigidBody2,\n                maxForceDirection: e.maxForceDirection(),\n                maxForceMagnitude: e.maxForceMagnitude(),\n                totalForce: e.totalForce(),\n                totalForceMagnitude: e.totalForceMagnitude()\n            });\n            colliderDispatcher2?.('contact', {\n                targetCollider: collider1,\n                targetRigidBody: rigidBody1,\n                maxForceDirection: e.maxForceDirection(),\n                maxForceMagnitude: e.maxForceMagnitude(),\n                totalForce: e.totalForce(),\n                totalForceMagnitude: e.totalForceMagnitude()\n            });\n            // RigidBody Events\n            rigidBodyDispatcher1?.('contact', {\n                targetCollider: collider2,\n                targetRigidBody: rigidBody2,\n                maxForceDirection: e.maxForceDirection(),\n                maxForceMagnitude: e.maxForceMagnitude(),\n                totalForce: e.totalForce(),\n                totalForceMagnitude: e.totalForceMagnitude()\n            });\n            rigidBodyDispatcher2?.('contact', {\n                targetCollider: collider1,\n                targetRigidBody: rigidBody1,\n                maxForceDirection: e.maxForceDirection(),\n                maxForceMagnitude: e.maxForceMagnitude(),\n                totalForce: e.totalForce(),\n                totalForceMagnitude: e.totalForceMagnitude()\n            });\n        });\n        // Collision events\n        eventQueue.drainCollisionEvents((handle1, handle2, started) => {\n            const collider1 = world.getCollider(handle1);\n            const collider2 = world.getCollider(handle2);\n            // Sanity check\n            if (!collider1 || !collider2) {\n                return;\n            }\n            const { colliderDispatcher1, colliderDispatcher2, rigidBodyDispatcher1, rigidBodyDispatcher2 } = getEventDispatchers(ctx, collider1, collider2);\n            const rigidBody1 = collider1.parent();\n            const rigidBody2 = collider2.parent();\n            if (started) {\n                // intersections are triggered by sensors\n                const isIntersection = world.intersectionPair(collider1, collider2);\n                if (isIntersection) {\n                    // Collider Events\n                    colliderDispatcher1?.('sensorenter', {\n                        targetCollider: collider2,\n                        targetRigidBody: rigidBody2\n                    });\n                    colliderDispatcher2?.('sensorenter', {\n                        targetCollider: collider1,\n                        targetRigidBody: rigidBody1\n                    });\n                    // RigidBody Events\n                    rigidBodyDispatcher1?.('sensorenter', {\n                        targetCollider: collider2,\n                        targetRigidBody: rigidBody2\n                    });\n                    rigidBodyDispatcher2?.('sensorenter', {\n                        targetCollider: collider1,\n                        targetRigidBody: rigidBody1\n                    });\n                    // intersections with sensors don't trigger contact pairs, returning\n                    return;\n                }\n                world.contactPair(collider1, collider2, (manifold, flipped) => {\n                    // Collider events\n                    colliderDispatcher1?.('collisionenter', {\n                        flipped,\n                        manifold,\n                        targetCollider: collider2,\n                        targetRigidBody: rigidBody2\n                    });\n                    colliderDispatcher2?.('collisionenter', {\n                        flipped,\n                        manifold,\n                        targetCollider: collider1,\n                        targetRigidBody: rigidBody1\n                    });\n                    // RigidBody Events\n                    rigidBodyDispatcher1?.('collisionenter', {\n                        flipped,\n                        manifold,\n                        targetCollider: collider2,\n                        targetRigidBody: rigidBody2\n                    });\n                    rigidBodyDispatcher2?.('collisionenter', {\n                        flipped,\n                        manifold,\n                        targetCollider: collider1,\n                        targetRigidBody: rigidBody1\n                    });\n                });\n            }\n            else {\n                // COLLISION / INTERSECTION ENDED\n                // intersections are triggered by sensors, but apparently not on collision exit\n                const isIntersection = world.intersectionPair(collider1, collider2) ||\n                    collider1.isSensor() ||\n                    collider2.isSensor();\n                if (isIntersection) {\n                    colliderDispatcher1?.('sensorexit', {\n                        targetCollider: collider2,\n                        targetRigidBody: rigidBody2\n                    });\n                    colliderDispatcher2?.('sensorexit', {\n                        targetCollider: collider1,\n                        targetRigidBody: rigidBody1\n                    });\n                    // RigidBody Events\n                    rigidBodyDispatcher1?.('sensorexit', {\n                        targetCollider: collider2,\n                        targetRigidBody: rigidBody2\n                    });\n                    rigidBodyDispatcher2?.('sensorexit', {\n                        targetCollider: collider1,\n                        targetRigidBody: rigidBody1\n                    });\n                    // intersections with sensors don't trigger contact pairs, returning\n                    return;\n                }\n                // Collider events\n                colliderDispatcher1?.('collisionexit', {\n                    targetCollider: collider2,\n                    targetRigidBody: rigidBody2\n                });\n                colliderDispatcher2?.('collisionexit', {\n                    targetCollider: collider1,\n                    targetRigidBody: rigidBody1\n                });\n                // RigidBody Events\n                rigidBodyDispatcher1?.('collisionexit', {\n                    targetCollider: collider2,\n                    targetRigidBody: rigidBody2\n                });\n                rigidBodyDispatcher2?.('collisionexit', {\n                    targetCollider: collider1,\n                    targetRigidBody: rigidBody1\n                });\n            }\n        });\n    }, { order });\n    // replacing the original pause and resume functions as well as the paused property\n    ctx.pause = () => stop();\n    ctx.resume = () => start();\n    ctx.paused = derived(started, (started) => !started);\n};\n", null, null, "import { get_current_component } from 'svelte/internal';\nexport const useHasEventListeners = () => {\n    const component = get_current_component();\n    const hasEventListeners = (type) => {\n        const callbacks = component.$$.callbacks;\n        return type in callbacks && callbacks[type].length > 0;\n    };\n    return {\n        hasEventListeners\n    };\n};\n", "import { Euler, Object3D, Quaternion, Vector3 } from 'three';\nconst tempPosition = new Vector3();\nconst tempQuaternion = new Quaternion();\nconst tempRotation = new Euler();\nconst tempScale = new Vector3();\n/**\n * Get the world position of an object.\n * If no target is provided, a globally used\n * temporary Vector3 is used.\n *\n * @param object\n * @param target\n * @returns\n */\nexport const getWorldPosition = (object, target) => {\n    return object.getWorldPosition(target ?? tempPosition);\n};\n/**\n * Get the world quaternion of an object.\n * If no target is provided, a globally used\n * temporary Quaternion is used.\n *\n * @param object\n * @param target\n * @returns\n */\nexport const getWorldQuaternion = (object, target) => {\n    return object.getWorldQuaternion(target ?? tempQuaternion);\n};\n/**\n * Get the world rotation of an object.\n * If no target is provided, a globally used\n * temporary Euler is used.\n *\n * @param object\n * @param target\n * @returns\n */\nexport const getWorldRotation = (object, target) => {\n    object.getWorldQuaternion(tempQuaternion);\n    return target\n        ? target.setFromQuaternion(tempQuaternion)\n        : tempRotation.setFromQuaternion(tempQuaternion);\n};\n/**\n * Get the world scale of an object.\n * If no target is provided, a globally used\n * temporary Vector3 is used.\n *\n * @param object\n * @param target\n * @returns\n */\nexport const getWorldScale = (object, target) => {\n    return object.getWorldScale(target ?? tempScale);\n};\n", "import { RigidBodyType } from '@dimforge/rapier3d-compat';\nconst rigidBodyTypeMap = {\n    dynamic: RigidBodyType.Dynamic,\n    fixed: RigidBodyType.Fixed,\n    kinematicPosition: RigidBodyType.KinematicPositionBased,\n    kinematicVelocity: RigidBodyType.KinematicVelocityBased\n};\nexport const parseRigidBodyType = (type) => {\n    return rigidBodyTypeMap[type];\n};\n", null, null, "import { ActiveEvents } from '@dimforge/rapier3d-compat';\nexport const applyColliderActiveEvents = (collider, colliderHasEventListeners, rigidBodyHasEventListeners) => {\n    let events = 0;\n    if (colliderHasEventListeners('collisionenter') ||\n        colliderHasEventListeners('collisionexit') ||\n        rigidBodyHasEventListeners?.('collisionenter') ||\n        rigidBodyHasEventListeners?.('collisionexit') ||\n        colliderHasEventListeners('sensorenter') ||\n        colliderHasEventListeners('sensorexit') ||\n        rigidBodyHasEventListeners?.('sensorenter') ||\n        rigidBodyHasEventListeners?.('sensorexit')) {\n        events = events | ActiveEvents.COLLISION_EVENTS;\n    }\n    if (colliderHasEventListeners('contact') || rigidBodyHasEventListeners?.('contact')) {\n        events = events | ActiveEvents.CONTACT_FORCE_EVENTS;\n    }\n    if (events > 0) {\n        collider.setActiveEvents(events);\n    }\n};\n", "import { Euler, Quaternion } from 'three';\nconst e = new Euler();\nconst q = new Quaternion();\n/**\n * Sets the values of a temporary Euler and returns the quaternion from that\n * @param values\n * @returns\n */\nexport const eulerToQuaternion = (values) => {\n    e.set(...values);\n    return q.setFromEuler(e);\n};\n", "export const scaleVertices = (vertices, scale) => {\n    const scaledVerts = Array.from(vertices);\n    for (let i = 0; i < vertices.length / 3; i++) {\n        scaledVerts[i * 3] *= scale.x;\n        scaledVerts[i * 3 + 1] *= scale.y;\n        scaledVerts[i * 3 + 2] *= scale.z;\n    }\n    return scaledVerts;\n};\nexport const scaleColliderArgs = (shape, args, scale) => {\n    // Heightfield only scales the last arg\n    const newArgs = args.slice();\n    if (shape === 'heightfield') {\n        // Is this for auto scaling heightfield to THREE scale of the object?\n        // ;(newArgs[3] as number) = scale.x\n        return newArgs;\n    }\n    // Trimesh and convex scale the vertices\n    if (shape === 'trimesh' || shape === 'convexHull') {\n        newArgs[0] = new Float32Array(scaleVertices(newArgs[0], scale));\n        return newArgs;\n    }\n    const scaleArray = [scale.x, scale.y, scale.z];\n    return newArgs.map((arg, index) => (scaleArray[index] ?? 1) * arg);\n};\n", null, "import { ActiveEvents, Collider, ColliderDesc, World, RigidBody } from '@dimforge/rapier3d-compat';\nimport { Mesh, Quaternion, Vector3 } from 'three';\n/**\n *\n * Creates collider descriptions including default translations\n *\n * @param object\n * @param world\n * @param friction\n * @param restitution\n * @param collidersType\n * @param rigidBody\n * @returns\n */\nexport const createCollidersFromChildren = (object, collidersType, world, rigidBody) => {\n    const colliders = [];\n    let description;\n    const offset = new Vector3();\n    /**\n     * Trying to find the parent RigidBody.\n     * If we find something, good. If not,\n     * the Colliders are created on the world positions\n     * of the meshes they resemble.\n     */\n    const rigidBodyWorldPos = new Vector3();\n    const rigidBodyWorldQuatInversed = new Quaternion();\n    object.traverseAncestors((child) => {\n        if (child.userData.isRigidBody) {\n            child.getWorldPosition(rigidBodyWorldPos);\n            child.getWorldQuaternion(rigidBodyWorldQuatInversed);\n            rigidBodyWorldQuatInversed.invert();\n        }\n    });\n    object.traverse((child) => {\n        if ('isMesh' in child) {\n            const { geometry } = child;\n            const worldPos = child.getWorldPosition(new Vector3());\n            const { x, y, z } = worldPos.sub(rigidBodyWorldPos);\n            const worldQuat = child.getWorldQuaternion(new Quaternion());\n            const { x: rx, y: ry, z: rz, w: rw } = worldQuat.clone().premultiply(rigidBodyWorldQuatInversed);\n            const scale = child.getWorldScale(new Vector3());\n            switch (collidersType) {\n                case 'cuboid':\n                    {\n                        geometry.computeBoundingBox();\n                        const { boundingBox } = geometry;\n                        const size = boundingBox.getSize(new Vector3());\n                        boundingBox.getCenter(offset);\n                        description = ColliderDesc.cuboid((size.x / 2) * scale.x, (size.y / 2) * scale.y, (size.z / 2) * scale.z);\n                    }\n                    break;\n                case 'ball':\n                    {\n                        geometry.computeBoundingSphere();\n                        const { boundingSphere } = geometry;\n                        const radius = boundingSphere.radius * scale.x;\n                        offset.copy(boundingSphere.center);\n                        description = ColliderDesc.ball(radius);\n                    }\n                    break;\n                case 'trimesh':\n                    {\n                        const g = geometry.clone().scale(scale.x, scale.y, scale.z);\n                        description = ColliderDesc.trimesh(g.attributes.position.array, g.index?.array);\n                    }\n                    break;\n                case 'capsule':\n                    {\n                        geometry.computeBoundingBox();\n                        const { boundingBox } = geometry;\n                        const size = boundingBox.getSize(new Vector3());\n                        boundingBox.getCenter(offset);\n                        const radius = Math.max((size.x / 2) * scale.x, (size.z / 2) * scale.z);\n                        description = ColliderDesc.capsule((size.y / 2) * scale.y - radius, radius);\n                    }\n                    break;\n                case 'convexHull':\n                    // eslint-disable-next-line no-case-declarations\n                    const g = geometry.clone().scale(scale.x, scale.y, scale.z);\n                    {\n                        description = ColliderDesc.convexHull(g.attributes.position.array);\n                    }\n                    break;\n            }\n            description\n                .setTranslation(x + offset.x, y + offset.y, z + offset.z)\n                .setRotation({ x: rx, y: ry, z: rz, w: rw })\n                .setActiveEvents(ActiveEvents.COLLISION_EVENTS);\n            const collider = world.createCollider(description, rigidBody);\n            colliders.push(collider);\n        }\n    });\n    return colliders;\n};\n", null, "export const computeBitMask = (groups, filter, memberships) => {\n    if (groups !== undefined) {\n        // groups is setting the filter and memberships at once\n        const g = groups;\n        const mask = g.reduce((acc, f) => {\n            return acc | (1 << f);\n        }, 0) |\n            g.reduce((acc, m) => {\n                return acc | (1 << (m + 16));\n            }, 0);\n        return mask;\n    }\n    const mask = memberships.reduce((acc, f) => {\n        return acc | (1 << f);\n    }, 0) |\n        filter.reduce((acc, m) => {\n            return acc | (1 << (m + 16));\n        }, 0);\n    return mask;\n};\n", null, null, null],
  "mappings": "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",
  "names": ["bodies", "e", "started", "ctx", "init", "e", "tempQuaternion", "ctx", "buffers", "vertices", "colors", "g", "mask", "ctx", "create_if_block", "ctx", "e"]
}
